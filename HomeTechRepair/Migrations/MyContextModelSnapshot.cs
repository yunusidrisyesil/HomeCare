// <auto-generated />
using System;
using HomeTechRepair.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HomeTechRepair.Migrations
{
    [DbContext(typeof(MyContext))]
    partial class MyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HomeTechRepair.Models.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BuildingNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoorNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("Line")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("HomeTechRepair.Models.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SupportTicketId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SupportTicketId")
                        .IsUnique();

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HomeTechRepair.Models.Entities.ReciptDetail", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReciptMasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("ServicePrice")
                        .HasColumnType("float");

                    b.HasKey("ServiceId", "ReciptMasterId")
                        .HasName("AltarnateKey_ReciptServiceId");

                    b.HasIndex("ReciptMasterId");

                    b.ToTable("ReciptDetails");
                });

            modelBuilder.Entity("HomeTechRepair.Models.Entities.ReciptMaster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SupportTicketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isInvoiced")
                        .HasColumnType("bit");

                    b.Property<bool>("isPaid")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("SupportTicketId");

                    b.HasIndex("UserId");

                    b.ToTable("ReciptMasters");
                });

            modelBuilder.Entity("HomeTechRepair.Models.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("HomeTechRepair.Models.Entities.SupportTicket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResolutionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SupportTickets");
                });

            modelBuilder.Entity("HomeTechRepair.Models.Entities.Address", b =>
                {
                    b.HasOne("HomeTechRepair.Models.Identiy.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("HomeTechRepair.Models.Entities.Appointment", b =>
                {
                    b.HasOne("HomeTechRepair.Models.Entities.SupportTicket", "SupportTicket")
                        .WithOne("Appointment")
                        .HasForeignKey("HomeTechRepair.Models.Entities.Appointment", "SupportTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupportTicket");
                });

            modelBuilder.Entity("HomeTechRepair.Models.Entities.ReciptDetail", b =>
                {
                    b.HasOne("HomeTechRepair.Models.Entities.ReciptMaster", "ReciptMaster")
                        .WithMany("ReciptDetails")
                        .HasForeignKey("ReciptMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeTechRepair.Models.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReciptMaster");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("HomeTechRepair.Models.Entities.ReciptMaster", b =>
                {
                    b.HasOne("HomeTechRepair.Models.Entities.SupportTicket", "SupportTicket")
                        .WithMany()
                        .HasForeignKey("SupportTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeTechRepair.Models.Identiy.ApplicationUser", "User")
                        .WithMany("ReciptMasters")
                        .HasForeignKey("UserId");

                    b.Navigation("SupportTicket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HomeTechRepair.Models.Entities.SupportTicket", b =>
                {
                    b.HasOne("HomeTechRepair.Models.Identiy.ApplicationUser", "User")
                        .WithMany("SupportTickets")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HomeTechRepair.Models.Entities.ReciptMaster", b =>
                {
                    b.Navigation("ReciptDetails");
                });

            modelBuilder.Entity("HomeTechRepair.Models.Entities.SupportTicket", b =>
                {
                    b.Navigation("Appointment");
                });
#pragma warning restore 612, 618
        }
    }
}
